---
- name: Setup pacman keyring
  block:
    - name: Setup pacman keyring
      ansible.builtin.command: pacman-key --init

    - name: Populate pacman keyring
      ansible.builtin.command: pacman-key --populate

- name: Rank Arch mirrors using reflector
  block:
    - name: Install the reflector package
      community.general.pacman:
        name:
          - reflector
        update_cache: yes

    - name: Search for the fastest mirrors supporting HTTPS
      ansible.builtin.shell: reflector --verbose --latest 10 --sort rate | awk -e '! /rsync/ {print}' > /etc/pacman.d/mirrorlist

- name: Install the base system
  ansible.builtin.shell:
    cmd: "pacstrap -K /mnt base linux linux-firmware"
  args:
    creates: /mnt/bin

- name: Setup fstab
  block:
    - name: Generate fstab entries
      ansible.builtin.shell: |
        genfstab -U /mnt >> /mnt/etc/fstab
      args:
        executable: /bin/bash

- name: Create symlink for timezone
  ansible.builtin.shell:
    cmd: "arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime"

- name: Set the hardware clock
  ansible.builtin.shell:
    cmd: "arch-chroot /mnt hwclock --systohc"

- name: Setup locale
  block:
  - name: Set locale.gen
    ansible.builtin.lineinfile:
      dest: /mnt/etc/locale.gen
      regexp: "^#{{ locale }} UTF-8"
      line: "{{ locale }} UTF-8"
      state: present

  - name: Create and set LANG in locale.conf
    block:
      - name: Create locale.conf
        ansible.builtin.copy:
          dest: /mnt/etc/locale.conf
          content: 'LANG={{ locale }}'
          force: no

  - name: Generate locale
    ansible.builtin.shell:
      cmd: "arch-chroot /mnt locale-gen"

- name: Set the hostname
  ansible.builtin.lineinfile:
    path: /mnt/etc/hostname
    line: "{ hostname }}"
    create: yes
    mode: '0644'
    owner: root
    group: root

- name: Set the hosts file
  ansible.builtin.blockinfile:
    path: /mnt/etc/hosts
    block: |
      127.0.1.1   localhost
      ::1         localhost
      127.0.1.1   {{ hostname }}.localdomain {{ hostname }}
    mode: '0644'
    owner: root
    group: root
    backup: yes

- name: Set the root password
  ansible.builtin.shell:
    cmd: |
      arch-chroot /mnt bash -c "echo 'root:{{ root_password }}' | chpasswd"

- name: Add files and dirs to be copied to all created users
  block:
    - name: Select all template dotfiles
      ansible.builtin.find:
        paths: /home/condor/dotfiles
        recurse: yes
        patterns: "*.j2"
        file_type: file
      register: templated_dotfiles
      delegate_to: localhost

    - name: Template dotfiles
      ansible.builtin.template:
        src: "{{ item.path }}"
        dest: "{{ item.path | regex_replace('\\.j2$', '') }}"
        owner: root
        group: root
        mode: '0755'
        force: yes
        backup: yes
      loop: "{{ templated_dotfiles.files }}"
      delegate_to: localhost

    - name: Copy dotfiles to /etc/skel
      ansible.builtin.copy:
        src: /home/condor/dotfiles/
        dest: /mnt/etc/skel/.config/
        owner: root
        group: root
        mode: '0755'
        force: yes
        backup: yes

- name: Setup users in chroot
  block:
    - name: Check if users exist
      ansible.builtin.shell: |
        arch-chroot /mnt id -u "{{ item.username }}"
      changed_when: false
      loop: "{{ users }}"
      register: user_exists
      failed_when: user_exists.rc not in [0, 1]
      no_log: true

    - name: Create users that do not exist
      ansible.builtin.shell: |
        echo "{{ item.item.password }}" | arch-chroot /mnt useradd -m -p "$(openssl passwd -6 -stdin)" -s "{{ item.item.shell }}" -G "{{ item.item.groups | join(',') }}" "{{ item.item.username }}"
      when: item.rc == 1
      loop: "{{ user_exists.results }}"
      no_log: true

- name: Install and configure sudo
  block:
    - name: Install sudo
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt pacman -S --noconfirm sudo"

    - name: Add wheel group to sudoers
      ansible.builtin.lineinfile:
        path: /mnt/etc/sudoers
        regexp: '^# %wheel\s+ALL=\(ALL\)\s+ALL'
        line: '%wheel ALL=(ALL) ALL'
        state: present
        validate: 'visudo -cf %s'
      become: true

- name: Install and configure sshd
  block:
    - name: Install openssh
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt pacman -S --noconfirm openssh"

    - name: Enable sshd
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt systemctl enable sshd"

    - name: Start sshd
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt systemctl start sshd"

- name: Configure the bootloader
  block:
    - name: Install bootloader related packages
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt pacman -S --noconfirm grub efibootmgr dosfstools os-prober mtools"

    - name: Run grub install command
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck"
      register: grub_install

    - name: Fail if GRUB installation fails
      fail:
        msg: "Failed to install GRUB bootloader"
      when: grub_install.rc != 0

    - name: Setup iPXE for GRUB
      block:
        - name: Create iPXE directory
          ansible.builtin.file:
            path: /mnt/boot/ipxe
            state: directory
            mode: '0755'

        - name: Download iPXE efi binary
          ansible.builtin.get_url:
            url: https://boot.ipxe.org/ipxe.efi
            dest: /mnt/boot/ipxe/ipxe.efi

        - name: Add PXE boot entry
          ansible.builtin.blockinfile:
            path: /mnt/etc/grub.d/40_custom
            block: |
              menuentry 'Network Boot (iPXE)' {
                  search --no-floppy --set=root --file /boot/ipxe/ipxe.efi
                  chainloader /boot/ipxe/ipxe.efi
              }
            create: yes
            mode: '0755'
            owner: root
            group: root

    - name: Generate GRUB configuration file
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg"

- name: Install required packages
  block:
    - name: Install packages
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt pacman -S --noconfirm networkmanager python"

    - name: Enable NetworkManager
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt systemctl enable NetworkManager"

    - name: Start NetworkManager
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt systemctl start NetworkManager"

- name: Add public SSH key to root's authorized_keys
  ansible.builtin.lineinfile:
    path: /mnt/root/.ssh/authorized_keys
    line: "{{ lookup('file', '/home/condor/.ssh/{{ inventory_hostname }}_public_key.pub') }}"
    create: yes
    mode: '0600'
    owner: root
    group: root
    state: present
    insertafter: EOF

- name: Add provisioning key to root's authorized_keys
  ansible.builtin.lineinfile:
    path: /mnt/root/.ssh/authorized_keys
    line: "{{ lookup('file', '/home/condor/.ssh/provisioning_key.pub') }}"
    create: yes
    mode: '0600'
    owner: root
    group: root
    state: present
    insertafter: EOF

- name: Reboot the system
  ansible.builtin.reboot:
    reboot_timeout: 600
  become: yes

- name: Install specified packages
  community.general.pacman:
    name: "{{ item }}"
    state: present
  loop: "{{ packages }}"
