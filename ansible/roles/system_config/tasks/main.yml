---
- name: Setup pacman keyring
  block:
    - name: Setup pacman keyring
      ansible.builtin.command: pacman-key --init

    - name: Populate pacman keyring
      ansible.builtin.command: pacman-key --populate

- name: Rank Arch mirrors using reflector
  block:
    - name: Install the reflector package
      community.general.pacman:
        name:
          - reflector
        update_cache: yes

    - name: Search for the fastest mirrors supporting HTTPS
      ansible.builtin.shell: reflector --verbose --latest 10 --sort rate | awk -e '! /rsync/ {print}' > /etc/pacman.d/mirrorlist

- name: Install the base system
  ansible.builtin.shell:
    cmd: "pacstrap -K /mnt base linux linux-firmware"
  args:
    creates: /mnt/bin

- name: Setup fstab
  block:
    - name: Generate fstab entries
      ansible.builtin.shell: |
        genfstab -U /mnt >> /mnt/etc/fstab
      args:
        executable: /bin/bash

- name: Create symlink for timezone
  ansible.builtin.shell:
    cmd: "arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime"

- name: Set the hardware clock
  ansible.builtin.shell:
    cmd: "arch-chroot /mnt hwclock --systohc"

- name: Setup locale
  block:
  - name: Set locale.gen
    ansible.builtin.lineinfile:
      dest: /mnt/etc/locale.gen
      regexp: "^#{{ locale }} UTF-8"
      line: "{{ locale }} UTF-8"
      state: present

  - name: Create and set LANG in locale.conf
    block:
      - name: Create locale.conf
        ansible.builtin.copy:
          dest: /mnt/etc/locale.conf
          content: 'LANG={{ locale }}'
          force: no

  - name: Generate locale
    ansible.builtin.shell:
      cmd: "arch-chroot /mnt locale-gen"

- name: Set the hostname
  ansible.builtin.lineinfile:
    path: /mnt/etc/hostname
    line: "{ hostname }}"
    create: yes
    mode: '0644'
    owner: root
    group: root

- name: Set the hosts file
  ansible.builtin.blockinfile:
    path: /mnt/etc/hosts
    block: |
      127.0.1.1   localhost
      ::1         localhost
      127.0.1.1   {{ hostname }}.localdomain {{ hostname }}
    mode: '0644'
    owner: root
    group: root
    backup: yes

- name: Set the root password
  ansible.builtin.shell:
    cmd: "arch-chroot /mnt echo 'root:{{ root_password }}' | chpasswd"

- name: Setup users
  block:
    - name: Setup users
      ansible.builtin.user:
        name: "{{ item.username }}"
        password: "{{ item.password }}"
        shell: "{{ item.shell }}"
        state: present
        create_home: yes
        groups: "{{ item.groups | join(',') }}"
        append: yes
      loop: "{{ users }}"
      when: item.groups is defined and item.groups | length > 0
      no_log: true

- name: Install and configure sudo
  block:
    - name: Install sudo
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt pacman -S --noconfirm sudo"

    - name: Add wheel group to sudoers
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt sed -i '/^# %wheel ALL=(ALL) ALL/s/^# //' /etc/sudoers"

- name: Configure the bootloader
  block:
    - name: Install bootloader related packages
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt pacman -S --noconfirm grub efibootmgr dosfstools os-prober mtools"

    - name: Run grub install command
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck"
      register: grub_install

    - name: Fail if GRUB installation fails
      fail:
        msg: "Failed to install GRUB bootloader"
      when: grub_install.rc != 0

    - name: Generate GRUB configuration file
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg"

- name: Install and setup essential packages
  block:
    - name: Install essential packages
      ansible.builtin.command:
        cmd: "arch-chroot /mnt pacman -S --noconfirm networkmanager"
      when: packages is defined and packages | length > 0

    - name: Enable NetworkManager
      ansible.builtin.shell:
        cmd: "arch-chroot /mnt systemctl enable NetworkManager"

# - name: Install packages
#   ansible.builtin.shell:
#     cmd: "arch-chroot /mnt pacman -S --noconfirm {{ packages | join(' ') }}"
#   when: packages is defined and packages | length > 0

# - name: Reload systemd daemons
#   ansible.builtin.shell:
#     cmd: "arch-chroot /mnt systemctl daemon-reload"

- name: Add public SSH key to root's authorized_keys
  ansible.builtin.lineinfile:
    path: /mnt/root/.ssh/authorized_keys
    line: "{{ lookup('file', '/home/condor/.ssh/{{ inventory_hostname }}_public_key.pub') }}"
    create: yes
    mode: '0600'
    owner: root
    group: root
    state: present
    insertafter: EOF
